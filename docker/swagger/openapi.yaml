openapi: 3.0.0
info:
  version: 1.0.0
  title: 掲示板API
  description: >-
    laravel学習の掲示板APIです
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: shinoda1116.miwa@gmail.com
servers:
  - url: https://localhost:8000/api
paths:
  /temporary_users/:
    post:
      summary: 仮会員登録
      description: >
        仮会員の登録を実施。仮登録実施後に本登録用リンクがメールに送信されます。
      parameters: []
      requestBody:
        required: true
        description: 会員登録時のリクエストボディ
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        201:
          description: created
  /verify/{token}:
    get:
      summary: 仮会員登録のトークンチェック
      description: >  
        メールから本登録用リンクを踏み、画面遷移直後に本APIを叩いてトークンチェックする。
        ステータスコード200で正常の場合、会員登録画面を見せる。
        トークンチェックエラーの場合は仮会員登録画面に戻す。
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: success operation
  /users:
    post:
      summary: 会員登録
      description: >
        トークンチェック完了後の会員登録画面で本APIを叩いて、会員登録処理を実施する。
      parameters: []
      requestBody:
        description: 会員登録時のリクエストボディ
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ユーザーネーム
                  example: alchemy
                email:
                  type: string
                  description: メールアドレス
                  example: test@example.com
                password:
                  type: string
                  description: パスワード(半角英数字8文字以上)
                  example: dummyPassword
                password_confirmation:
                  type: string
                  description: パスワード確認
                  example: dummyPassword
      responses:
        201:
          description: created
  /users/{userId}:
    get:
      summary: 会員情報取得
      description: >
        ユーザの会員情報を取得する。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: ユーザネーム
                    example: alchemy
                  email:
                    type: string
                    description: メールアドレス
                    example: test@example.com
                  password:
                    type: string
                    description: パスワード
                    example: dummyPassword
        400:
          description: Bad request
        403:
          description: Forbidden
    put:
      summary: 会員情報更新
      description: >
        マイページ画面で会員情報を更新する際に実施。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: ユーザ名
                  example: alchemy
                email:
                  type: string
                  description: メールアドレス
                  example: test@example.com
                password:
                  type: string
                  description: パスワード(半角英数字8文字以上)
                  example: dummyPassword
                password_confirmation:
                  type: string
                  description: パスワード確認
                  example: dummyPassword
      security:
        - bearerAuth: []
      responses:
        204:
          description: Success(No content)
        400:
          description: Bad request
        403:
          description: Forbidden
    delete:
      summary: 会員情報削除
      description: >
        会員情報の削除(退会)を実施する。※DB的にはソフトデリートのため情報は残る形。
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        204:
          description: Success(No content)
        400:
          description: Bad request
        500:
          description: Internal Server Error
  /sanctum/csrf-cookie:
    get:
      summary: 認証の初期化用API
      description: >
        認証用のトークン設定API
        https://readouble.com/laravel/8.x/ja/sanctum.html
      parameters: []
      responses:
        200:
          description: success
  /login:
    post:
      summary: ログイン
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: メールアドレス
                  example: test@example.com
                password:
                  type: string
                  description: パスワード(半角英数字八文字以上)
                  example: dummyPassword
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
  /logout:
    post:
      summary: ログアウト
      description: >
        ログアウト処理を実施します。
      parameters: []
      responses:
        default:
          description: success
  /posts:
    get:
      summary: 投稿一覧取得API
      description: >
        投稿一覧の取得APIです。
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        title:
                          type: string
                        content:
                          type: string
                        postTime:
                          type: string
    post:
      summary: 記事の新規投稿API
      description: >
        記事の新規投稿APIです。
      parameters: []
      requestBody:
        description: 会員登録時のリクエストボディ
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
      security:
        - bearerAuth: []
      responses:
        204:
          description: success
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /posts/{postId}:
    get:
      summary: 特定記事の取得API
      description: >
        特定記事の取得を実施するAPIです。
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                    description: 記事タイトル
                  content:
                    type: string
                    description: 記事内容
                  postTime:
                    type: string
                    description: 記事内容

  /posts/{postId}/comment:
    get:
      summary: 特定記事のコメント取得API
      description: >
        特定記事のコメント取得を実施するAPIです。
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userName:
                      type: string
                      description: コメントしてユーザ
                    comment:
                      type: string
                      description: コメント内容
                    commentTime:
                      type: string
                      description: コメント日時
    post:
      summary: 特定記事へのコメント送信API
      description: >
        特定記事のコメント送信を実施するAPIです。
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        204:
          description: success
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /month_aggregate:
    get:
      summary: 月次投稿数・ユーザー登録数の取得API
      description: >
        月次集計結果を取得するAPIです。
      parameters: []
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                  post:
                    type: string
# componentで再利用可能な部品を作っていく
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid


